from aiologger import Logger

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

import re
import redis

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import NoSuchElementException

from candle import get_data
from db import create_table, save_to_db

# TODO: add aiogram_dialog
# from aiogram_dialog import Dialog, DialogManager, DialogRegistry, Window, StartMode
# from aiogram_dialog.widgets.kbd import SwitchTo, Button, Column

API_TOKEN = '5943100350:AAFc_QxpURpcZSsiFsRlGBd3dMCOAz1uMwE'
URL = 'https://candle.fmph.uniba.sk/'
PATH = r'/opt/WebDriver/bin/chromedriver'

service = Service(PATH)
options = webdriver.ChromeOptions()
options.add_argument('--headless')
options.add_argument('disable-infobars')
options.add_argument('--disable-extensions')
options.add_argument('start-maximized')

DRIVER = webdriver.Chrome(service=service, options=options)

# Configure logging
logger = Logger.with_default_handlers(name='my-logger')
r = redis.Redis(host='localhost', port=6379, db=0)


try:
    r.ping()
    print('[OK] Redis connected')
except redis.exceptions.ConnectionError:
    print('[ERROR] Redis not connected')

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Menu(StatesGroup):
    start = State()
    schedule = State()
    group = State()
    teacher = State()
    audience = State()


# Create the first menu with three buttons 'Schedule', 'About', 'Help'
class StartMenu:
    def __init__(self):
        self.keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        self.keyboard.row('üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', 'üìù –ü–æ–º–æ—â—å', 'üìö –û –±–æ—Ç–µ')

    def get_keyboard(self):
        return self.keyboard


# Create the second menu with four buttons 'Group', 'Teacher', 'Audience', 'Back'
class ScheduleMenu:
    def __init__(self):
        self.keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        self.keyboard.row('üìö –ì—Ä—É–ø–ø–∞', 'üìö –ü—Ä–µ–ø–æ–¥', 'üìö –ê—É–¥–∏—Ç–æ—Ä–∏—è', 'üîô –ù–∞–∑–∞–¥')

    def get_keyboard(self):
        return self.keyboard


# Create handlers for the first menu
@dp.message_handler(commands='start')
async def process_start_command(message: types.Message):
    await create_table()
    logger.info('User {} started the bot'.format(message.from_user.id))
    await Menu.start.set()
    await message.reply('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è UK. –ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?', reply_markup=StartMenu().get_keyboard())
    

@dp.message_handler(state=Menu.start)
async def process_second_menu(message: types.Message, state: FSMContext):
    logger.info('User {} chose the option {}'.format(message.from_user.id, message.text))
    if message.text == 'üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
        await Menu.schedule.set()
        await message.reply('–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', reply_markup=ScheduleMenu().get_keyboard())
    elif message.text == 'üìù –ü–æ–º–æ—â—å':
        await message.reply('–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è UK. –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. '
                            '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. '
                            '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. '
                            '–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥"')
    elif message.text == 'üìö –û –±–æ—Ç–µ':
        await message.reply('–°–¥–µ–ª–∞–Ω–æ —Å ‚ù§ @kayfolom2009 –¥–ª—è –Ω–∞—à–∏—Ö —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –¥—Ä—É–∑–µ–π –∏ –ø–æ–¥—Ä—É–≥. –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –≤—ã –∑–∞–º–µ—Ç–∏–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –æ—à–∏–±–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')


# Create handlers for the second menu
@dp.message_handler(state=Menu.schedule)
async def process_third_menu(message: types.Message, state: FSMContext):
    logger.info('User {} chose the option {}'.format(message.from_user.id, message.text))
    if message.text == 'üìö –ì—Ä—É–ø–ø–∞':
        await Menu.group.set()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1inf1, 1INF1)')
    elif message.text == 'üìö –ü—Ä–µ–ø–æ–¥':
        await Menu.teacher.set()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏/–∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–ª—É—á—à–µ —Ñ–∞–º–∏–ª–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, Kubacek, vargova)')
    elif message.text == 'üìö –ê—É–¥–∏—Ç–æ—Ä–∏—è':
        await Menu.audience.set()
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (I-H6, H6, h6)')
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        await Menu.start.set()
        await message.reply('–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?', reply_markup=StartMenu().get_keyboard())


# Create handler for 'üìù –ü–æ–º–æ—â—å' button
@dp.message_handler(state=Menu.start)
async def process_help(message: types.Message, state: FSMContext):
    logger.info('User {} asked for help'.format(message.from_user.id))
    if message.text == 'üìù –ü–æ–º–æ—â—å':
        await Menu.guide.set()
        await message.reply('–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è UK. –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. '
                            '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ" –∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. '
                            '–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥" –∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é. '
                            '–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ —É–∑–Ω–∞—Ç—å –æ –±–æ—Ç–µ, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "üìö –û –±–æ—Ç–µ"')
        

# Create handlers for the third menu
@dp.message_handler(state=Menu.group)
async def process_group(message: types.Message, state: FSMContext):
    logger.info('Processing group {}'.format(message.text))
    try:
        url = URL + f'kruzky/{message.text}.csv'
        get_data('group', message.text, DRIVER, url, r)
        await save_to_db(url, message.from_user.first_name)
        logger.info('Group request was saved to database')
        logger.info('Group {} was cached successfully'.format(message.text))
        await message.reply_document(open('schedule.html', 'rb'))
    except IndexError:
        logger.info('Group {} was not found'.format(message.text))
        await message.reply('–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    await Menu.schedule.set()


@dp.message_handler(state=Menu.teacher)
async def process_teacher(message: types.Message, state: FSMContext):
    logger.info('Processing teacher {}'.format(message.text))
    if not re.match(r'^[a-zA-Z]+$', message.text):
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    driver = webdriver.Chrome(service=service, options=options)
    try:
        logger.info('Teacher {} was cached successfully'.format(message.text))
        url = get_data('teacher', message.text, driver, URL, r)
        await save_to_db(url, message.from_user.first_name)
        logger.info('Teacher request was saved to database')
        await message.reply_document(open('schedule.html', 'rb'))
    except NoSuchElementException:
        logger.info('Teacher {} was not found'.format(message.text))
        await message.reply('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    await Menu.schedule.set()


@dp.message_handler(state=Menu.audience)
async def process_audience(message: types.Message, state: FSMContext):
    logger.info('Processing audience {}'.format(message.text))
    driver = webdriver.Chrome(service=service, options=options)
    try:
        logger.info('Audience {} was cached successfully'.format(message.text))
        url = get_data('audience', message.text, driver, URL, r)
        await save_to_db(url, message.from_user.first_name)
        logger.info('Audience request was saved to database')
        await message.reply_document(open('schedule.html', 'rb'))
    except NoSuchElementException:
        logger.info('Audience {} was not found'.format(message.text))
        await message.reply('–ê—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
    await Menu.schedule.set()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)